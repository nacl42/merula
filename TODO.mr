#
# TODO file for merula
#

@mr:filter active
.mql status=active

@mr:filter done
.mql status=done

@TODO parse multiline values without EOF delimiter
.status active
.doc<<EOF
It should be possible to define multiline values without
the `<<EOF` syntax, i.e. if no separator is given, then the
next node will be the delimiter.
EOF

@TODO index range
.status active
.doc<<EOF
mql 'tag[0:1]~s' currently means:
- filter for all nodes with name 'tag'
- filter out nodes 0 to 1
- filter out values containing s

which means:
if there is only one node 0, then that is ok as well
This condition does not require the nodes to exist...

for a selector that would be ok, for a filter it is questionable
EOF

@TODO more chars for key
.doc<<EOF
Currently, we only support a..z|A..Z for keys, however I would like to
have more characters, such as Umlaute.

  @Stück should be allowed

=> look at predefined groups in pest parser
EOF

@TODO case-insensitive search
.doc<<EOF
An expression such as author~tolkien should be case-insensitive by default.
EOF


@TODO allow to load multiple .mr files
.status inactive
.doc<<EOF
Useful for having a master file and a custom data file.
Useful for having a schema file and a data file.

Should common nodes be merged?
EOF

@TODO add logo
.doc<<EOF
image of a blackbird (turdus  merula)

or even rename to merlin ?
EOF

@TODO shorthand notation for attributes
.doc<<EOF
Example:
 .discovery Cavendish {+date 1786}
 .saturation 2.35 {+unit T}
 .density 2.01 {+unit g/cm³m} {+state "liquid, at room temperature"}

prerequisite for this is that the value is parsed by the regular parser!
EOF

@TODO add some proper tests in the source code
.status active

@TODO extend equal comparison to perform type conversion
.tag mql
.doc<<EOF
allow equals operator (=) for numbers as well
maybe move functions such as equals, less_than, greater_than
part of Value and have two different versions (strict with
type checking or non-strict with type conversion)
EOF

@TODO date comparison operators (<<, >>, ==)
.tag mql
.doc date comparison: before (<<), after (>>), same time (==)

@TODO command line option for limiting result nodes
.doc<<EOF
command line option -p for selecting nodes
 -p element,amu => only print out nodes with key element or amu
EOF

@TODO implement schema
.doc<<EOF
define schema and transform values of new Memos by applying
transformation functions
EOF

@TODO apply text template
.short transform result set by applying a template to each resulting Memo
.doc<<EOF
implementation ideas:
- tera
- custom template engine (after all, where's the fun in using an
  existing template engine?)
EOF


@TODO list available keys
.doc list all available keys for a result set (--keys)

@TODO add ROADMAP file
.doc add ROADMAP.md file

@TODO print attributes
.doc write attributes when using -vv in list output


#
# --- finished tasks ---
#

@TODO add colour to output
.status done
.finished 2021-01-24
.doc<<EOF
add coloring of ouput
header nodes and data nodes full of colour
EOF

@TODO implement quoted values
.status done
.finished 2021-01-25
.tag mql
.doc allow quotes around filter values "description ~ 'the book'"

@TODO allow to specify multiple conditions
.status done
.finished 2021-01-29
.tag mql
.doc<<EOF
But which notation would be best?
  'amu>5,amu<20'
  'amu>5 || amu >3'
  'amu>5 && ferromagnetic=true'
EOF

@TODO define mql filter in a memo
.status done
.finished 2021-01-30
.doc<<EOF
move filter into a Memo, so that we can apply it
  by selecting the filter:

  @mr:filter sample
  .doc sample filter
  .mql number<5

FIRST switch command line option --filter to --mql
SECOND use command line option --filter to specify mr:filter

EOF



@TODO resolve usage of both --mql and --filter
.status done
.finished 2021-01-30
.doc<<EOF
If both options, --mql and --filter, are provided, try to use the --filter,
then refine the search with the given --mql
EOF

@TODO print statistics
.status done
.finished 2021-01-30
.doc<<EOF
command 'stats' that counts the number of memos, the number of nodes,
the number of distinct keys, ...
EOF

@TODO include other .mr files from within a .mr file
.status done
.date 2021-01-30
.doc<<EOF
include other .mr files with special command

@mr:include filter_periodic.mr

uses the path relative to the .mr file
must check for cyclic dependencies!!!

The current implementation avoids the cyclic dependency problem by
not allowing nested includes at all.
EOF

@TODO filter by node type
.status done
.finished 2021-02-06
.doc<<EOF
- filter by collection: ```@app```
- filter by data node: ```.url```
EOF

@TODO node index
.status done
.finished 2021-02-09
.tag mql
.doc allow node index "email[0]"
.doc<<EOF
This seems difficult with the current design of the MemoFilter.

We currently pass the number of the node, which is 0 for the header
node and 1..n for the data nodes.

We would need to keep track of data node numbers
 ... or store the node numbers in the structure
 ... or save nodes as multimap, which would mean we do not preserve
     node order

On the other hand, if we are not concerned about saving the data again
(read-only format), then this could be possible.

This would be a major redesign, so careful consideration is required.
Maybe try out in a different branch!

for 'email[0]' we would only need to count if email matches.

EOF

@TODO consider to include node type in Node struct
.status discarded
.doc<<EOF
Extend struct Node to include NodeType.
Header or Data.

This would allow us to use the NodeType on any field w/o context.

We still could not filter for header/data node.

EOF


@TODO only print matching nodes
.status done
.finished 2021-02-11
.doc<<EOF
only print matching nodes, e.g. for 'author~Tolkien' we would print

 @book The Lord of the Rings
 .author Tolkien

What would be the command line option? -v
EOF
